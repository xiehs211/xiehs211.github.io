[{"title":"Hello World","path":"/2025/08/15/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new My New Post More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment"},{"title":"Halo主题字体美化","path":"/2024/09/30/Halo主题字体美化/","content":"Halo主题字体美化 真的超级好看 墙裂推荐！！！ 快来试试吧 背景之前看过好多Blog都用这种字体 实在是太太太 太好看啦 找了好久终于到找了 找教程看到了本主题开发者Ryan Wang的Blog 文中给出了大概修改方法 如何安装首先进入Halo后台设置-代码注入-全局输入以下代码保存 link rel=stylesheet href=https://cdn.staticfile.net/lxgw-wenkai-webfont/1.7.0/style.css /style body,#post-content,.markdown-body font-family: LXGW WenKai,PingFang SC,Hiragino Sans GB,Droid Sans Fallback,Microsoft YaHei,sans-serif !important; :root --halo-comment-widget-base-font-family: LXGW WenKai,PingFang SC,Hiragino Sans GB,Droid Sans Fallback,Microsoft YaHei,sans-serif !important; --halo-search-widget-base-font-family: LXGW WenKai,PingFang SC,Hiragino Sans GB,Droid Sans Fallback,Microsoft YaHei,sans-serif !important; /style 安装前： 安装后： 确实非常好看 还是很推荐改字体的 还在等什么 快去实践吧 后记使用了markdown编辑器，文章内容好像字体没有改动。先这样用吧。"},{"title":"PVE 安装 OpenWrt 作为旁路网关","path":"/2024/09/30/PVE-安装-OpenWrt-作为旁路网关/","content":"背景已经有了ALL IN ONE，上面安装了PVE。这是安装 OpenWrt 作为旁路网关的记录。 题外话为什么选择 All-in-One 这样的方案？知乎上面有很多 AIO 的劝退贴1，主要的观点例如：部署稳定的AIO需要比较高的技术门槛，并且一旦出现故障会影响家庭网路，数据安全很难保证云云，这些对于小白来说确实是不小的问题。然而，作为一个相关领域的从业人员，并且有玩过 VPS 和虚拟机经验的我来说，还是要体验一次。 我的主要需求一个是旁路网关，使用旁路网关的方式可以避免一出问题全屋上不了网的情况了。 组网目前计划的网路连接 开始部署 准备 安装好的 PVE 系统 OpenWrt 系统镜像。为了扩容方便，选择使用 Ext4 分区的 generic-ext4-combined-efi.img.gz 文件。下载页面，在 root 首页找最新版本 GParted Live CD 镜像，用来修改系统分区大小。下载页面 创建虚拟机Openwrt 需要的资源并不多，可以根据自己需要划分内存和 CPU。选择的镜像是 efi 的，所以 BIOS 要选择 UEFI 的，不需要勾选添加 EFI 磁盘。在磁盘页面也不需要添加磁盘，稍后会从镜像导入。 选中数据中心，点击“创建虚拟机”按钮，勾上“高级”，勾上“开机自启动”（软路由一般情况下开机自启动较好），名称填入虚拟机名称openwrt，点击“下一步” 操作系统选择“Linux”，版本选择“6.X-2.6 Kernel”即可，先不选择介质，点击“下一步” 系统选择默认seabios即可，不选择存储，稍后会从镜像导入。点击“下一步”，磁盘删除掉。cpu默认1，至少改成2核，最多和物理线程一样（我是2核心4线程，可以改到4，先用的2）下一步内存修改2048到1024，即为1GB网络默认半虚拟化。目前就1个网卡。 登录 PVE，下载镜像文件，并解压： cd /var/lib/vz/template/iso本地下载后上传gunzip openwrt-23.05.4-x86-64-generic-ext4-combined-efi.img.gz 将磁盘镜像文件导入到刚刚创建的虚拟机： # qm disk import vmid source storage [OPTIONS]qm disk import 100 openwrt-23.05.4-x86-64-generic-ext4-combined-efi.img local-lvm 然后回到 PVE 管理网页，选中新的磁盘双击，添加。现在可以开机进入系统了。但是不急，默认磁盘的剩余空间很小，放不了很多东西。为了以后考虑，还要给磁盘扩容。 磁盘扩容选中硬盘 磁盘操作 调整磁盘大小，扩大虚拟磁盘的大小为2G。接下来是调整分区大小。这一步是可以用命令做的，我偷了一点懒，懒得学分区操作的命令，用了图形化分区工具 GParted，操作起来比较简单。 先在 PVE 的 ISO 镜像储存界面上传 GParted 镜像，然后给 OpenWrt 的虚拟机的 CDDVD 添加上。在 选项 引导顺序 中调整到光盘最高。进入系统之后，操作很方便了。根据提示修复错误，然后右键 rootfs 分区调整大小，拖动箭头，把剩余空间拉满就可以了。点击修复fix最后点击打勾保存关机。 然后我们在左上角的添加，网络设备中，添加第二块网卡，依旧默认选择半虚拟化就行。 2个虚拟网卡接入了一个网桥，实际是一个物理网口。 移除光盘，调整启动顺序，重新启动，就能够进入系统了。 修改ip进入openwrt的shell页面，vi etcconfignetwork找到config interface lan这一段代码 在option ipaddr 这里把原来的’192.168.1.1’ 改成你需要的ip，比如我这里改成192.168.31.2保存退出 在shell页面输入reboot，重启openwrt，查看ip是否正确配置：现在已经正确获取了 IP 地址，可以用 SSH 连接或者浏览器访问管理页面了。 一些基础配置： # 软件源换成清华镜像源sed -i s_downloads.openwrt.org_mirrors.tuna.tsinghua.edu.cn/openwrt_ /etc/opkg/distfeeds.conf# 更新软件包索引opkg update# 中文包opkg install luci-i18n-base-zh-cnopkg install luci-i18n-firewall-zh-cn# mDNS 支持，安装后可以用 http://openwrt.local 打开管理页面# opkg install avahi-daemon-service-http# 未测试，笔者依旧直接ip浏览器打开 在浏览器中输入你刚才改好的ip地址，访问openwrt的管理页面。 在 OpenWrt 网页管理页面，网络 接口 里面，把 DHCP 相关的设置关掉，因为旁路由不需要提供 DHCP 服务。 终端配置有两种办法，一种是在设备上手动设置网关为软路由的IP地址，另一种是在主路由上面把 DHCP 默认网关设置为软路由的 IP。为了稳定，我用手动配置的办法。 先测试没有修改，自动dhcp可以看到，直接回到主路由31.1访问 修改网关和dns给旁路网关 测试效果可以看到第一跳、第二跳、第三跳分别是旁路网关、我的硬路由和光猫，然后是联通的网络，最后到达目标地址。"},{"title":"PVE安装后的初始化配置","path":"/2024/09/30/PVE安装后的初始化配置/","content":"背景自组了nas服务器，准备做 ALL In One。 系统选择pve，基于debian的虚拟机平台。 关于PVE的一些初始化配置记录1. 去除订阅提示pvetools是一个开源的pve工具，可以快速帮我们实现一些常用的pve配置。 这里我仅用来去除订阅提示。 pvetools托管在github上，只需要克隆git库即可： cd ~apt update 报错如下，应该是网络不通，没更新完 apt -y install git git clone https://github.com/ivanhao/pvetools.git 克隆后直接使用pvetools即可： cd pvetools./pvetools.sh 我这里是使用浏览器连接的pve，运行后出现图形界面：这里可以方便的配置apt国内源、去除企业源等功能。 这里我只用到了去除订阅提示功能，只需要往下选择这个选项l一路回车，期间黑屏等待几秒即可跳出成功。 2. 修改安装源与去除PVE企业源修改安装源为中科大源。 cd /etc/aptcp sources.list sources.list.baksed -i s|^deb http://ftp.debian.org|deb https://mirrors.ustc.edu.cn|g /etc/apt/sources.listc.edu.cn/proxmox/dsed -i s|^deb http://security.debian.org|deb https://mirrors.ustc.edu.cn/debian-security|g /etc/apt/sources.list PVE企业源需要订阅，这里修改为中科大的不需要订阅的源： cd /etc/aptcp -r sources.list.d/ sources.d.bakcd sources.list.d/rm -rf ceph.listrm -rf pve-enterprise.listsource /etc/os-releaseecho deb https://mirrors.ustc.edu.cn/proxmox/debian/pve $VERSION_CODENAME pve-no-subscription /etc/apt/sources.list.d/pve-no-subscription.list 替换CT Template cp /usr/share/perl5/PVE/APLInfo.pm /usr/share/perl5/PVE/APLInfo.pm.baksed -i s|http://download.proxmox.com|https://mirrors.ustc.edu.cn/proxmox|g /usr/share/perl5/PVE/APLInfo.pm 3. 安装常用软件apt clean apt autoclean apt autoremove --purgeapt updateapt dist-upgradeapt install htop lm-sensors unzip fail2ban vim tmux unattended-upgrades apt-listchanges powermgmt-baseapt install iperf iperf3 iftop net-tools ethtool 至此一些基础配置已经完成。 4. 配置sensors监控数据基于上述常用软件中已安装 lm-sensors 包的情况下配置，如果没有安装，则可以单独安装： apt install lm-sensors 之后配置监控的数据源： /usr/share/perl5/PVE/API2/Nodes.pm 辑该文件，你可以使用 vim 工具来编辑，也可以用ftp客户端下载下来后用编辑器编辑，这里我下载到windows内用vscode来编辑： 根据文本 pveversion 来搜索，找到对应处，添加2行代码如下： $res-pveversion = PVE::pvecfg::package() . / . PVE::pvecfg::version_text();#需要添加如下$res-thermalstate = `sensors`; # 检测CPU温度$res-cpusensors = `lscpu | grep MHz`; # 检测CPU频率#需要添加如上my $dinfo = df(/, 1); # output is bytes 保存 之后编辑js文件： /usr/share/pve-manager/js/pvemanagerlib.js 通过搜索 textField: ‘pveversion’ 找到目标位置，添加代码如下： itemId: version, colspan: 2, printBar: false, title: gettext(PVE Manager Version), textField: pveversion, value: , ,#需要添加如下 itemId: thermal, colspan: 2, printBar: false, title: gettext(CPU温度), textField: thermalstate, renderer:function(value) const p0 = value.match(/Package id 0.*?\\+([\\d\\.]+)Â/)[1]; const c0 = value.match(/Core 0.*?\\+([\\d\\.]+)Â/)[1]; const c1 = value.match(/Core 1.*?\\+([\\d\\.]+)Â/)[1]; const c2 = value.match(/Core 2.*?\\+([\\d\\.]+)Â/)[1]; const c3 = value.match(/Core 3.*?\\+([\\d\\.]+)Â/)[1]; return `Package: $p0 ℃ || 核心1: $c0 ℃ | 核心2: $c1 ℃ | 核心3: $c2 ℃ | 核心4: $c3 ℃ ` # 因为我是4个核心，所以添加4个。不同CPU核心数不一样，根据自身需求增加，或者也可以只保留1个Package温度 , itemId: MHz, colspan: 2, printBar: false, title: gettext(CPU频率), textField: cpusensors, renderer:function(value) const f0 = value.match(/CPU.*scaling MHz.*?([\\d]+)/)[1]; const f1 = value.match(/CPU min MHz.*?([\\d]+)/)[1]; const f2 = value.match(/CPU max MHz.*?([\\d]+)/)[1]; const f3 = f0*f2/100; return `实时: $f3 MHz($f0%) | 最小: $f1 MHz | 最大: $f2 MHz ` ,#需要添加如上 ], 继续修改框架高度 不修改，会导致页面显示不全 搜索widget.pveNodeStatus，修改height值 height 的值需按情况修改，每多一行数据增加20 Ext.define(PVE.node.StatusView, extend: Proxmox.panel.StatusView, alias: widget.pveNodeStatus, height: 320, # 原始值300，增加1行CPU温度、1行CPU频率，应改为340，这里我只增加1行显示，是因为我想屏蔽掉‘储存库状态’显示 bodyPadding: 15 5 15 5, layout: type: table, columns: 2, tableAttrs: style: width: 100%, , , , 保存，完成后重启pveproxy即可： systemctl restart pveproxy 重启后页面需要 Ctrl + F5 强制刷新，在PVE概要页即可展示结果： 5. 总结记录PVE安装后的初始配置，以备不时之需。"}]